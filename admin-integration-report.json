{
  "packageJson": {
    "name": "proj0",
    "version": "0.1.0",
    "scripts": {
      "dev": "next dev --turbopack",
      "build": "prisma generate && next build",
      "start": "next start",
      "lint": "next lint",
      "db:push": "prisma db push --force-reset",
      "db:seed": "prisma db seed",
      "tailwind:init": "npx tailwindcss init -p"
    },
    "dependencies": {
      "@auth/prisma-adapter": "^2.10.0",
      "@prisma/client": "^6.13.0",
      "@react-email/components": "^0.5.0",
      "@react-email/render": "^1.2.0",
      "bcrypt": "^6.0.0",
      "lucide-react": "^0.536.0",
      "next": "15.4.6",
      "next-auth": "^4.24.11",
      "nodemailer": "^6.10.1",
      "prisma": "^6.13.0",
      "react": "19.1.0",
      "react-dom": "19.1.0",
      "recharts": "^3.1.2"
    },
    "devDependencies": {
      "@eslint/eslintrc": "^3",
      "@tailwindcss/postcss": "^4.1.11",
      "@types/bcrypt": "^6.0.0",
      "@types/node": "^20",
      "@types/nodemailer": "^6.4.17",
      "@types/react": "^19",
      "@types/react-dom": "^19",
      "autoprefixer": "^10.4.21",
      "eslint": "^9",
      "eslint-config-next": "15.4.6",
      "postcss": "^8.5.6",
      "tailwindcss": "^4.1.11",
      "ts-node": "^10.9.2",
      "typescript": "^5"
    }
  },
  "next.config.ts": "import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n",
  "tsconfig.json": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ES2017\",\r\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\r\n    \"allowJs\": true,\r\n    \"skipLibCheck\": true,\r\n    \"strict\": true,\r\n    \"noEmit\": true,\r\n    \"esModuleInterop\": true,\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"bundler\",\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"jsx\": \"preserve\",\r\n    \"incremental\": true,\r\n    \"plugins\": [\r\n      {\r\n        \"name\": \"next\"\r\n      }\r\n    ],\r\n    \"paths\": {\r\n      \"@/*\": [\"./src/*\"]\r\n    }\r\n  },\r\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\r\n  \"exclude\": [\"node_modules\"]\r\n}\r\n",
  "tailwind.config.ts": "// tailwind.config.ts\r\nimport type { Config } from \"tailwindcss\";\r\nconst config: Config = {\r\n  darkMode: \"class\",            // <â€” add this\r\n  content: [\r\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n  ],\r\n  theme: { extend: {} },\r\n  plugins: [],\r\n};\r\nexport default config;\r\n\r\n// import type { Config } from \"tailwindcss\";\r\n\r\n// const config: Config = {\r\n//   content: [\r\n//     \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\r\n//     \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\r\n//     \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\r\n//   ],\r\n//   theme: {\r\n//     extend: {},\r\n//   },\r\n//   plugins: [],\r\n// };\r\n// export default config;\r\n",
  "postcss.config.js": "module.exports = {\r\n  plugins: {\r\n    // Corrected to use the new PostCSS plugin package\r\n    '@tailwindcss/postcss': {},\r\n    autoprefixer: {},\r\n  },\r\n}\r\n",
  "eslint.config.mjs": "import { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n});\n\nconst eslintConfig = [\n  ...compat.extends(\"next/core-web-vitals\", \"next/typescript\"),\n];\n\nexport default eslintConfig;\n",
  "tree:src/app": [
    "src\\app\\(admin)",
    "src\\app\\(admin)\\admin",
    "src\\app\\(admin)\\admin\\layout.tsx",
    "src\\app\\(admin)\\admin\\orders",
    "src\\app\\(admin)\\admin\\orders\\page.tsx",
    "src\\app\\(admin)\\admin\\page.tsx",
    "src\\app\\(admin)\\admin\\products",
    "src\\app\\(admin)\\admin\\products\\page.tsx",
    "src\\app\\(admin)\\admin\\_components",
    "src\\app\\(admin)\\admin\\_components\\AutoTopbar.tsx",
    "src\\app\\(admin)\\admin\\_components\\Card.tsx",
    "src\\app\\(admin)\\admin\\_components\\DataTable.tsx",
    "src\\app\\(admin)\\admin\\_components\\OrdersTableCard.tsx",
    "src\\app\\(admin)\\admin\\_components\\ProductsTableCard.tsx",
    "src\\app\\(admin)\\admin\\_components\\Sidebar.tsx",
    "src\\app\\(admin)\\admin\\_components\\SoftButton.tsx",
    "src\\app\\(admin)\\admin\\_components\\StatCard.tsx",
    "src\\app\\(admin)\\admin\\_components\\Topbar.tsx",
    "src\\app\\(admin)\\admin\\_debug",
    "src\\app\\(admin)\\admin\\_debug\\page.tsx",
    "src\\app\\api",
    "src\\app\\api\\auth",
    "src\\app\\api\\auth\\[...nextauth]",
    "src\\app\\api\\auth\\[...nextauth]\\route.ts",
    "src\\app\\api\\checkout",
    "src\\app\\api\\checkout\\route.ts",
    "src\\app\\api\\register",
    "src\\app\\api\\register\\route.ts",
    "src\\app\\cart",
    "src\\app\\cart\\page.tsx",
    "src\\app\\checkout",
    "src\\app\\checkout\\page.tsx",
    "src\\app\\error.tsx",
    "src\\app\\favicon.ico",
    "src\\app\\forbidden",
    "src\\app\\forbidden\\page.tsx",
    "src\\app\\globals.css",
    "src\\app\\layout.tsx",
    "src\\app\\login",
    "src\\app\\login\\page.tsx",
    "src\\app\\not-authorized",
    "src\\app\\not-authorized\\page.tsx",
    "src\\app\\not-found.tsx",
    "src\\app\\order-confirmation",
    "src\\app\\order-confirmation\\[orderId]",
    "src\\app\\order-confirmation\\[orderId]\\page.tsx",
    "src\\app\\page.tsx",
    "src\\app\\products",
    "src\\app\\products\\[productId]",
    "src\\app\\products\\[productId]\\page.tsx",
    "src\\app\\providers.tsx",
    "src\\app\\providex.tsx",
    "src\\app\\register",
    "src\\app\\register\\page.tsx"
  ],
  "tree:src/components": [
    "src\\components\\AddressSelector.tsx",
    "src\\components\\BlogSection.tsx",
    "src\\components\\CarouselSection.tsx",
    "src\\components\\common",
    "src\\components\\common\\PageBreadcrumb.tsx",
    "src\\components\\ConfirmOrderModal.tsx",
    "src\\components\\Footer.tsx",
    "src\\components\\Header.tsx",
    "src\\components\\HideOnAdmin.tsx",
    "src\\components\\LoadingSpinner.tsx",
    "src\\components\\ProductCard.tsx",
    "src\\components\\ProductDisplay.tsx"
  ],
  "tree:src/lib": [
    "src\\lib\\admin",
    "src\\lib\\admin\\mock.ts",
    "src\\lib\\authOptions.ts",
    "src\\lib\\config",
    "src\\lib\\config\\settings.ts",
    "src\\lib\\email",
    "src\\lib\\email\\index.ts",
    "src\\lib\\email\\providers",
    "src\\lib\\email\\providers\\smtp.ts",
    "src\\lib\\email\\render.ts",
    "src\\lib\\email\\templates",
    "src\\lib\\email\\templates\\new-order.tsx",
    "src\\lib\\email\\templates\\order-confirmation.tsx",
    "src\\lib\\email\\templates\\_types.ts",
    "src\\lib\\nodemailer.ts",
    "src\\lib\\prisma.ts",
    "src\\lib\\requireAdmin.ts"
  ],
  "middleware.ts": "// middleware.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\nimport { getToken } from \"next-auth/jwt\";\r\n\r\n// Gate /admin pages AND /api/admin/* endpoints\r\nexport const config = { matcher: [\"/admin\", \"/admin/:path*\", \"/api/admin/:path*\"] } as const;\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const p = req.nextUrl.pathname;\r\n\r\n  // Allow Next internals + NextAuth routes\r\n  if (p.startsWith(\"/_next\") || p.startsWith(\"/api/auth\")) return NextResponse.next();\r\n\r\n  // Read JWT (explicit secret + handle dev/prod cookie names)\r\n  const token =\r\n    (await getToken({ req, secret: process.env.NEXTAUTH_SECRET })) ||\r\n    (await getToken({ req, secret: process.env.NEXTAUTH_SECRET, cookieName: \"next-auth.session-token\" })) ||\r\n    (await getToken({ req, secret: process.env.NEXTAUTH_SECRET, cookieName: \"__Secure-next-auth.session-token\" }));\r\n\r\n  const isApi = p.startsWith(\"/api/\");\r\n\r\n  // Not signed in\r\n  if (!token) {\r\n    if (isApi) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    const url = req.nextUrl.clone();\r\n    url.pathname = \"/login\";\r\n    url.searchParams.set(\"callbackUrl\", p + req.nextUrl.search);\r\n    return NextResponse.redirect(url);\r\n  }\r\n\r\n  // Signed in, but not ADMIN\r\n  const role = (token as Record<string, unknown>)?.role;\r\n  if (role !== \"ADMIN\") {\r\n    if (isApi) return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    const url = req.nextUrl.clone();\r\n    url.pathname = \"/forbidden\";\r\n    url.searchParams.set(\"from\", p);\r\n    return NextResponse.redirect(url);\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n",
  "src/app/(admin)/admin/layout.tsx": "export const dynamic = \"force-dynamic\";\r\n\r\nimport Sidebar from \"./_components/Sidebar\";\r\nimport { requireAdmin } from \"@/lib/requireAdmin\";\r\n\r\nexport default async function AdminLayout({ children }: { children: React.ReactNode }) {\r\n  await requireAdmin(\"/admin\");\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-[#F6F8FB]\">\r\n      <div className=\"flex\">\r\n        <Sidebar />\r\n        <main className=\"flex-1 min-h-screen\">\r\n          <div className=\"mx-auto max-w-7xl p-4 md:p-6 lg:p-8\">{children}</div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// import AppSidebar from \"@/layout/AppSidebar\";\r\n// import AppHeader from \"@/layout/AppHeader\";\r\n\r\n// export default function AdminLayout({ children }: { children: React.ReactNode }) {\r\n//   return (\r\n//     <div className=\"min-h-screen bg-[#F6F8FB] text-slate-900\">\r\n//       {/* fixed sidebar */}\r\n//       <AppSidebar />\r\n\r\n//       {/* content area (full width opposite the sidebar) */}\r\n//       <div className=\"lg:ml-[290px]\">\r\n//         <AppHeader />\r\n//         <div className=\"p-4 md:p-6 lg:p-8 w-full\">{children}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// import { SidebarProvider } from \"@/context/SidebarContext\";\r\n// import { ThemeProvider } from \"@/context/ThemeContext\";\r\n// import AppHeader from \"@/layout/AppHeader\";\r\n// import AppSidebar from \"@/layout/AppSidebar\";\r\n// import Backdrop from \"@/layout/Backdrop\";\r\n\r\n// export default function AdminLayout({ children }: { children: React.ReactNode }) {\r\n//   // NOTE: role gate is bypassed for now per your request â€” keep middleware disabled while mirroring.\r\n//   return (\r\n//     <ThemeProvider>\r\n//       <SidebarProvider>\r\n//         <div className=\"min-h-screen xl:flex bg-[#F6F8FB] dark:bg-black\">\r\n//           <AppSidebar />\r\n//           <Backdrop />\r\n//           <div className=\"flex-1 lg:ml-[290px]\">\r\n//             <AppHeader />\r\n//             <div className=\"p-4 md:p-6 lg:p-8 max-w-7xl mx-auto\">{children}</div>\r\n//           </div>\r\n//         </div>\r\n//       </SidebarProvider>\r\n//     </ThemeProvider>\r\n//   );\r\n// }\r\n",
  "src/app/(admin)/admin/page.tsx": "import PageBreadcrumb from \"@/components/common/PageBreadcrumb\";\r\nimport StatCard from \"./_components/StatCard\";\r\nimport { orders, products } from \"@/lib/admin/mock\";\r\n\r\nfunction currency(n: number) {\r\n  return new Intl.NumberFormat(\"en-PH\", { style: \"currency\", currency: \"PHP\" }).format(n);\r\n}\r\n\r\nexport default function AdminDashboard() {\r\n  const totalSales = orders.filter(o => o.status === \"PAID\" || o.status === \"SHIPPED\").reduce((s, o) => s + o.total, 0);\r\n  const pendingOrders = orders.filter(o => o.status === \"PENDING\").length;\r\n  const lowStock = products.filter(p => p.stock <= 10).length;\r\n  const activeProducts = products.filter(p => p.status === \"ACTIVE\").length;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <PageBreadcrumb pageTitle=\"Dashboard\" />\r\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <StatCard label=\"Total sales\" value={currency(totalSales)} hint=\"Paid + Shipped\" />\r\n        <StatCard label=\"Pending orders\" value={String(pendingOrders)} />\r\n        <StatCard label=\"Active products\" value={String(activeProducts)} />\r\n        <StatCard label=\"Low stock\" value={String(lowStock)} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n",
  "src/app/api/auth/[...nextauth]/route.ts": "export const runtime = \"nodejs\";\r\n\r\nimport NextAuth from \"next-auth\";\r\nimport { authOptions } from \"@/lib/authOptions\";\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n",
  "prisma/schema.prisma": "// This is your Prisma schema file,\r\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\r\n\r\ngenerator client {\r\n  provider = \"prisma-client-js\"\r\n}\r\n\r\ndatasource db {\r\n  provider = \"postgresql\"\r\n  url      = env(\"POSTGRES_URL\")\r\n}\r\n\r\n// --- NEW MODELS FOR ORDERS AND SETTINGS ---\r\n\r\nmodel Settings {\r\n  id         String @id @default(cuid())\r\n  storeEmail String\r\n}\r\n\r\nmodel Order {\r\n  id              String      @id @default(cuid())\r\n  orderId         String      @unique // For the KKMTXXX999 ID\r\n  total           Float\r\n  customerName    String\r\n  customerEmail   String\r\n  customerPhone   String\r\n  shippingAddress Json // Store the full address object\r\n  items           OrderItem[]\r\n  createdAt       DateTime    @default(now())\r\n  userId          String?     // Optional: link to a registered user\r\n  user            User?       @relation(fields: [userId], references: [id])\r\n}\r\n\r\nmodel OrderItem {\r\n  id        String  @id @default(cuid())\r\n  quantity  Int\r\n  price     Float // Price at the time of purchase\r\n  orderId   String\r\n  order     Order   @relation(fields: [orderId], references: [id])\r\n  productId String\r\n  product   Product @relation(fields: [productId], references: [id])\r\n}\r\n\r\n\r\n// --- EXISTING MODELS ---\r\n\r\nmodel Product {\r\n  id          String    @id @default(cuid())\r\n  name        String\r\n  price       Float\r\n  brandName   String\r\n  isFeatured  Boolean   @default(false)\r\n  stock       Int       @default(0)\r\n  imageUrl    String?\r\n  createdAt   DateTime  @default(now())\r\n  updatedAt   DateTime  @updatedAt\r\n  orderItems  OrderItem[]\r\n}\r\n\r\nmodel Blog {\r\n  id          String    @id @default(cuid())\r\n  title       String\r\n  excerpt     String\r\n  date        String\r\n  category    String\r\n  imageUrl    String?\r\n  createdAt   DateTime  @default(now())\r\n  updatedAt   DateTime  @updatedAt\r\n}\r\n\r\nenum UserRole {\r\n  USER\r\n  ADMIN\r\n}\r\n\r\nmodel User {\r\n  id            String    @id @default(cuid())\r\n  name          String?\r\n  email         String?   @unique\r\n  emailVerified DateTime?\r\n  image         String?\r\n  password      String?\r\n  role          UserRole  @default(USER)\r\n  accounts      Account[]\r\n  sessions      Session[]\r\n  orders        Order[]\r\n}\r\n\r\nmodel Account {\r\n  id                 String  @id @default(cuid())\r\n  userId             String\r\n  type               String\r\n  provider           String\r\n  providerAccountId  String\r\n  refresh_token      String?  @db.Text\r\n  access_token       String?  @db.Text\r\n  expires_at         Int?\r\n  token_type         String?\r\n  scope              String?\r\n  id_token           String?  @db.Text\r\n  session_state      String?\r\n  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n\r\n  @@unique([provider, providerAccountId])\r\n}\r\n\r\nmodel Session {\r\n  id           String   @id @default(cuid())\r\n  sessionToken String   @unique\r\n  userId       String\r\n  expires      DateTime\r\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\r\n}\r\n\r\nmodel VerificationToken {\r\n  identifier String\r\n  token      String   @unique\r\n  expires    DateTime\r\n\r\n  @@unique([identifier, token])\r\n}\r\n",
  "tree:src/app/api": [
    "src\\app\\api\\auth",
    "src\\app\\api\\auth\\[...nextauth]",
    "src\\app\\api\\auth\\[...nextauth]\\route.ts",
    "src\\app\\api\\checkout",
    "src\\app\\api\\checkout\\route.ts",
    "src\\app\\api\\register",
    "src\\app\\api\\register\\route.ts"
  ],
  "src/app/globals.css": "@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n"
}