generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Settings {
  id         String @id @default(cuid())
  storeEmail String
}

model Order {
  id              String      @id @default(cuid())
  orderId         String      @unique // For the KKMTXXX999 ID
  total           Float
  customerName    String
  customerEmail   String
  customerPhone   String
  shippingAddress Json // Store the full address object
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  userId          String? // Optional: link to a registered user
  user            User?       @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float // Price at the time of purchase
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  price      Float
  brandName  String
  isFeatured Boolean @default(false)
  isActive   Boolean @default(true)
  stock      Int     @default(0)

  model String? // e.g. vehicle/model code
  size  String? // e.g. S / M / L or dimensions
  sku   String? // keep non-unique for now

  primaryImageId String?        @unique
  primaryImage   ProductImage?  @relation("PrimaryProductImage", fields: [primaryImageId], references: [id])
  images         ProductImage[] @relation("ProductImages")

  // Normalized taxonomy: point to Subcategory (Category comes via Subcategory.category)
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  Brand      Brand?      @relation(fields: [brandId], references: [id])
  brandId    String?
}

model ProductImage {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation("ProductImages", fields: [productId], references: [id])
  primaryFor Product? @relation("PrimaryProductImage")
  url        String
  alt        String?
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())

  @@index([productId])
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  subcategories Subcategory[]
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // one-to-many side for Products once FK is in place
  products Product[]

  @@unique([categoryId, name], name: "categoryId_name")
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  excerpt   String
  date      String
  category  String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
